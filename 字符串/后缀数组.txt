struct SuffixArray {
    int n;
    std::vector<int> sa, rk, lc;
    std::vector<std::vector<int>> st;
    SuffixArray(const std::vector<int> &s) {
        n = s.size();
        sa.resize(n);
        lc.resize(n - 1);
        rk.resize(n);
        std::iota(sa.begin(), sa.end(), 0);
        std::sort(sa.begin(), sa.end(), [&](int a, int b) {return s[a] < s[b];});
        rk[sa[0]] = 0;
        for (int i = 1; i < n; ++i)
            rk[sa[i]] = rk[sa[i - 1]] + (s[sa[i]] != s[sa[i - 1]]);
        int k = 1;
        std::vector<int> tmp, cnt(n);
        tmp.reserve(n);
        while (rk[sa[n - 1]] < n - 1) {
            tmp.clear();
            for (int i = 0; i < k; ++i)
                tmp.push_back(n - k + i);
            for (auto i : sa)
                if (i >= k)
                    tmp.push_back(i - k);
            std::fill(cnt.begin(), cnt.end(), 0);
            for (int i = 0; i < n; ++i)
                ++cnt[rk[i]];
            for (int i = 1; i < n; ++i)
                cnt[i] += cnt[i - 1];
            for (int i = n - 1; i >= 0; --i)
                sa[--cnt[rk[tmp[i]]]] = tmp[i];
            std::swap(rk, tmp);
            rk[sa[0]] = 0;
            for (int i = 1; i < n; ++i)
                rk[sa[i]] = rk[sa[i - 1]] + (tmp[sa[i - 1]] < tmp[sa[i]] || sa[i - 1] + k == n || tmp[sa[i - 1] + k] < tmp[sa[i] + k]);
            k *= 2;
        }
        for (int i = 0, j = 0; i < n; ++i) {
            if (rk[i] == 0) {
                j = 0;
            } else {
                for (j -= j > 0; i + j < n && sa[rk[i] - 1] + j < n && s[i + j] == s[sa[rk[i] - 1] + j]; )
                    ++j;
                lc[rk[i] - 1] = j;
            }
        }
        int lg = std::__lg(n);
        st.assign(n, std::vector<int>(lg + 1));
        for (int i = 0; i < n - 1; ++i)
            st[i][0] = lc[i];
        for (int k = 1; k <= lg; ++k)
            for (int i = 0; i + (1 << k) < n; ++i)
                st[i][k] = std::min(st[i][k - 1], st[i + (1 << (k - 1))][k - 1]);
    }
    int rmq(int l, int r) {
        int k = std::__lg(r - l);
        return std::min(st[l][k], st[r - (1 << k)][k]);
    }
    int lcp(int i, int j) {
        if (i == j)
            return n - i;
        i = rk[i];
        j = rk[j];
        if (i > j)
            std::swap(i, j);
        return rmq(i, j);
    }
};