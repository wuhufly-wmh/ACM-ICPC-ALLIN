struct AVLnode;
typedef AVLnode *AVLtree;
struct AVLnode {
  int data, high;
  int freq, size;
  AVLtree ls, rs;
  AVLnode() : data(0), high(1), freq(1), size(1), ls(NULL), rs(NULL) {}
  AVLnode(int a) : data(a), high(1), freq(1), size(1), ls(NULL), rs(NULL) {}
};
int GetSize(AVLtree p) {
  if (p == NULL)
    return 0;
  return p->size;
}
int GetHigh(AVLtree p) {
  if (p == NULL)
    return 0;
  return p->high;
}
struct AVL {
  AVLtree root;
  void update(AVLtree &p) {
    p->size = GetSize(p->ls) + GetSize(p->rs) + p->freq;
    p->high = max(GetHigh(p->ls), GetHigh(p->rs)) + 1;
  }
  void LeftPlus(AVLtree &p) {
    AVLtree q;
    q = p->ls;
    p->ls = q->rs;
    q->rs = p;
    update(p);
    update(q);
    p = q;
  }
  void RightPlus(AVLtree &p) {
    AVLtree q;
    q = p->rs;
    p->rs = q->ls;
    q->ls = p;
    update(p);
    update(q);
    p = q;
  }
  void LeftRight(AVLtree &p) {
    RightPlus(p->ls);
    LeftPlus(p);
  }
  void RightLeft(AVLtree &p) {
    LeftPlus(p->rs);
    RightPlus(p);
  }
  void OutPut(AVLtree p) {
    if (p == NULL)
      return;
    OutPut(p->ls);
    for (int i = 1; i <= p->freq; ++i) {
      cout << p->data;
    }
    OutPut(p->rs);
  }
  void output() { OutPut(root); }
  void Insert(AVLtree &p, int x) {
    if (p == NULL) {
      p = new AVLnode(x);
      return;
    }
    if (p->data == x) {
      ++(p->freq);
      update(p);
      return;
    }
    if (p->data > x) {
      Insert(p->ls, x), update(p);
      if (GetHigh(p->ls) - GetHigh(p->rs) == 2) {
        if (x < p->ls->data)
          LeftPlus(p);
        else
          LeftRight(p);
      }
    } else {
      Insert(p->rs, x), update(p);
      if (GetHigh(p->rs) - GetHigh(p->ls) == 2) {
        if (x > p->rs->data)
          RightPlus(p);
        else
          RightLeft(p);
      }
    }
    update(p);
  }
  void insert(int x) { Insert(root, x); }
  void Erase(AVLtree &p, int x) {
    if (p == NULL)
      return;
    if (p->data > x) {
      Erase(p->ls, x), update(p);
      if (GetHigh(p->rs) - GetHigh(p->ls) == 2) {
        if (GetHigh(p->rs->rs) >= GetHigh(p->rs->ls))
          RightPlus(p);
        else
          RightLeft(p);
      }
    } else if (p->data < x) {
      Erase(p->rs, x), update(p);
      if (GetHigh(p->ls) - GetHigh(p->rs) == 2) {
        if (GetHigh(p->ls->ls) >= GetHigh(p->ls->rs))
          LeftPlus(p);
        else
          LeftRight(p);
      }
    } else {
      if (p->freq > 1) {
        --(p->freq);
        update(p);
        return;
      }
      if (p->ls && p->rs) {
        AVLtree q = p->rs;
        while (q->ls)
          q = q->ls;
        p->freq = q->freq;
        p->data = q->data, q->freq = 1;
        Erase(p->rs, q->data);
        update(p);
        if (GetHigh(p->ls) - GetHigh(p->rs) == 2) {
          if (GetHigh(p->ls->ls) >= GetHigh(p->ls->rs))
            LeftPlus(p);
          else
            LeftRight(p);
        }
      } else {
        AVLtree q = p;
        if (p->ls)
          p = p->ls;
        else if (p->rs)
          p = p->rs;
        else
          p = NULL;
        delete q;
        q = NULL;
      }
    }
    if (p == NULL)
      return;
    update(p);
  }
  void erase(int x) { Erase(root, x); }
  int get_val(AVLtree p, int rank) {
    if (GetSize(p->ls) >= rank)
      return get_val(p->ls, rank);
    if (GetSize(p->ls) + p->freq >= rank)
      return p->data;
    return get_val(p->rs, rank - GetSize(p->ls) - p->freq);
  }
  int GetVal(int rank) { return get_val(root, rank); }
  int get_rank(AVLtree p, int val) {
    if (p->data == val)
      return GetSize(p->ls) + 1;
    if (p->data > val)
      return get_rank(p->ls, val);
    return get_rank(p->rs, val) + GetSize(p->ls) + p->freq;
  }
  int GetRank(int val) { return get_rank(root, val); }
  int GetPrev(int val) {
    AVLtree ans = new AVLnode(-1LL << 42), p = root;
    while (p) {
      if (p->data == val) {
        if (p->ls) {
          p = p->ls;
          while (p->rs)
            p = p->rs;
          ans = p;
        }
        break;
      }
      if (p->data < val && p->data > ans->data)
        ans = p;
      p = p->data < val ? p->rs : p->ls;
    }
    return ans->data;
  }
  int GetNext(int val) {
    AVLtree ans = new AVLnode(1LL << 42), p = root;
    while (p) {
      if (p->data == val) {
        if (p->rs) {
          p = p->rs;
          while (p->ls)
            p = p->ls;
          ans = p;
        }
        break;
      }
      if (p->data > val && p->data < ans->data)
        ans = p;
      p = p->data < val ? p->rs : p->ls;
    }
    return ans->data;
  }
};