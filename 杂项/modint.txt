using ll = long long;
constexpr ll N = 4e5 + 100, inf = 0x3f3f3f3f, P = 1e9 + 7;

struct Z {
  int x;
  int norm(int v) const {
    if (v >= 0 && v < P) {
      return v;
    } else {
      return v < 0 ? v + P : v - P;
    }
  }
  Z qpow(ll n) const {
    Z res = 1;
    for (Z x = *this; n; x *= x, n >>= 1) {
      if (n & 1) {
        res *= x;
      }
    }
    return res;
  }
  Z(int x = 0) : x(norm(x)) {}
  Z(ll x) : x(norm(x % P)) {}
  int val() const {
      return x;
  }
  Z operator - () const {
      return Z(norm(P - x));
  }
  Z inv() const {
      assert(x != 0);
      return qpow(P - 2);
  }
  Z &operator *= (const Z &rhs) {
      x = ll(x) * rhs.x % P;
      return *this;
  }
  Z &operator += (const Z &rhs) {
      x = norm(x + rhs.x);
      return *this;
  }
  Z &operator -= (const Z &rhs) {
      x = norm(x - rhs.x);
      return *this;
  }
  Z &operator /= (const Z &rhs) {
      return *this *= rhs.inv();
  }
  bool operator != (Z rhs) {
    return this -> x != rhs.x;
  }
  bool operator > (Z rhs) {
    return this -> x > rhs.x;
  }
  bool operator >= (Z rhs) {
    return this -> x >= rhs.x;
  }
  bool operator < (Z rhs) {
    return this -> x < rhs.x;
  }
  bool operator <= (Z rhs) {
    return this -> x <= rhs.x;
  }
  bool operator == (Z rhs) {
    return this -> x == rhs.x;
  }
  friend Z operator * (const Z &lhs, const Z &rhs) {
      Z res = lhs;
      res *= rhs;
      return res;
  }
  friend Z operator + (const Z &lhs, const Z &rhs) {
      Z res = lhs;
      res += rhs;
      return res;
  }
  friend Z operator - (const Z &lhs, const Z &rhs) {
      Z res = lhs;
      res -= rhs;
      return res;
  }
  friend Z operator / (const Z &lhs, const Z &rhs) {
      Z res = lhs;
      res /= rhs;
      return res;
  }
  friend std::istream &operator >> (std::istream &is, Z &a) {
      ll v;
      is >> v;
      a = Z(v);
      return is;
  }
  friend ostream &operator << (ostream &out, const Z &val) {
    return out << val.x;
  }
};
template<class T>
T power(T a, int b) {
  T res = 1;
  for (; b; b /= 2, a *= a) {
    if (b & 1) {
      res *= a;
    }
  }
  return res;
}