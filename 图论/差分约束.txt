#include<bits/stdc++.h>
#define debug(x) cout << #x << ": " << x << "\n";
using namespace std;

using ll = long long;
const int N = 1e6 + 5, inf = 0x3f3f3f3f;

struct edge {
  int v, w;
  edge(int v, int w) : v(v), w(w){};
  edge(){};
};
vector<edge>G[N];
int vis[N], dis[N], cnt[N];
void solve() {
  int n, m, u, v, w;
  cin >> n >> m;
  for(int i = 0; i <= n; ++i) G[i].clear();
  /*
    v[i] <= 0 + v[0]
    dis[0] + 0 >= dis[i]
  */
  for(int i = 1; i <= n; ++i) G[0].emplace_back(i, 0);
  for(int i = 1; i <= m; ++i) {
    /*
      v[u] - v[v] <= w
      dis[v] + w >= dis[u]
    */
    cin >> u >> v >> w;
    G[v].emplace_back(u, w);
  }
  auto spfa = [&](int s) {
    queue<int>que;
    for(int i = 0; i <= n; ++i) {
      dis[i] = inf;
      vis[i] = cnt[i] = 0;
    }
    que.emplace(0);
    dis[0] = 0;
    vis[0] = cnt[0] = 1;
    while(!que.empty()) {
      int u = que.front();
      que.pop();
      vis[u] = 0;
      for(auto [v, w] : G[u]) {
        if(dis[v] > dis[u] + w) {
          dis[v] = dis[u] + w;
          cnt[v]++;
          if(cnt[v] >= n + 1) return false;
          if(!vis[v]) {
            que.push(v);
            vis[v] = 1;
          }
        }
      }
    }
    return true;
  };
  if(!spfa(0)) cout << "NO\n";
  else {
    for(int i = 1; i <= n; ++i) cout << dis[i] << " \n"[i == n];
  }  
  return ;
}
signed main () {
  cin.tie(nullptr) -> sync_with_stdio(false);
  cout.tie(nullptr);
  int _ = 1;
  while(_--) {
    solve();
  }
  return 0;
}