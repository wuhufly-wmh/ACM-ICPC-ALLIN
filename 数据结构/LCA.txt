#include<bits/stdc++.h>
#define debug(x) cout << #x << ": " << x << endl;
using namespace std;
const int N = 5e5 + 5, mod = 1e9 + 7, inf = 0x3f3f3f3f, eps = 1e-7;

struct node {
	int to, next;
} G[N];
int head[N] = {0}, dep[N] = {0}, dp[N][25] = {0}, fa[N] = {0};
int cnt = 0;
void solve() {
	int n, m, u, v;
	cin >> n;
	for(int i = 1; i <= n; ++i) head[i] = -1;
	auto add = [&](int u, int v) {
		G[++cnt] = {v, head[u]};
		head[u] = cnt;
		return ;
	};
	function<void(int, int)> dfs = [&](int u, int fa) {
		dp[u][0] = fa;
		dep[u] = dep[fa] + 1;
		for(int i = 1; i <= 20; ++i) dp[u][i] = dp[dp[u][i - 1]][i - 1];
		for(int i = head[u]; ~i; i = G[i].next) {
			int v = G[i].to;
			if(v == fa)continue;
			dfs(v, u);
		}
	};
	function<int(int, int)>lca = [&](int x, int y) {
		if(dep[x] < dep[y]) swap(x, y);
		int i = 0;
		while((1 << i) <= dep[x])i++;
		for(int j = i; j >= 0; j--) {
			if(dep[x] - (1 << j) >= dep[y]) {
				x = dp[x][j];
			}
		}
		if(x == y)return x;
		for(int j = i ; j >= 0; j--) {
			if(dp[x][j] != dp[y][j]) {
				tie(x, y) = make_tuple(dp[x][j], dp[y][j]);
			}
		}
		return dp[x][0];
	};
	for(int i = 1; i <= n - 1; ++i) {
		cin >> u >> v;
		add(u, v), add(v, u);
	}
	dfs(1, 0);

	return ;
}
/*
*/


signed main() {
	cin.tie(0) -> sync_with_stdio(false);
	cout.tie(0);
  cout.tie(0);
	int _;
	_ = 1;
	while(_--) {
		solve();
	}
	return 0;
}