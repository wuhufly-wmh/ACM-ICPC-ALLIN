using ll = long long;
namespace ExtendGcd {
	ll extend_gcd(ll a, ll b, ll& x, ll& y) {
		ll d = a;
		if (b != 0) {
			d = extend_gcd(b, a % b, y, x);
			y -= (a / b) * x;
		}
		else x = 1, y = 0;
		return d;
	}

}
namespace CRT {

	ll quick_mul(ll a, ll b, ll mod) {
		ll res = 0;
		while (a) {
			if (a & 1)res = (res + b) % mod;
			b = 2 * b % mod;
			a >>= 1;
		}
		return res;
	}

	ll inv(ll t, ll p) {//如果不存在，返回-1 
		ll x, y, d;
		d = ExtendGcd::extend_gcd(t, p, x, y);
		return d == 1 ? (x % p + p) % p : -1;
	}

	ll gcd(ll a, ll b) {
		return b ? gcd(b, a % b) : a;
	}

	ll lcm(ll a, ll b) {
		return b / gcd(a, b) * a;
	}

	//x = a(mod m)
	ll solve(const vector<ll>& a, const vector<ll> m) {
		ll M = 1, res = 0;
		for (int i = 0; i < m.size(); ++i)M = lcm(M, m[i]);
		for (int i = 0; i < a.size(); ++i) {
			ll Mi = M / m[i];
			ll ti = inv(Mi, m[i]);
			res = (res + quick_mul(quick_mul(a[i], ti, M), Mi, M)) % M;
		}
		return res;
	}

}

namespace ExLucas {

	const int MAXN = 1e6;

	vector<ll> A, M;

	ll fac[MAXN + 5];

	ll quick_pow(ll base, ll index, ll p) {
		ll res = 1;
		while (index) {
			if (index & 1)res = res * base % p;
			base = base * base % p;
			index >>= 1;
		}
		return res;
	}

	ll solve(ll n, ll p, ll pk) {
		if (n == 0)return 1;
		ll ans = quick_pow(fac[pk - 1], n / pk, pk) * fac[n % pk] % pk;
		return ans * solve(n / p, p, pk) % pk;
	}

	ll C(ll n, ll m, ll p, ll pk) {
		if (n < m)return 0;
		fac[0] = 1;
		for (int i = 1; i < pk; ++i) {
			fac[i] = fac[i - 1];
			if (i % p != 0)fac[i] = fac[i] * i % pk;
		}
		ll f1 = solve(n, p, pk), f2 = solve(m, p, pk), f3 = solve(n - m, p, pk), cnt = 0;
		for (ll i = n; i; i /= p)cnt += i / p;
		for (ll i = m; i; i /= p)cnt -= i / p;
		for (ll i = n - m; i; i /= p)cnt -= i / p;
		return f1 * CRT::inv(f2, pk) % pk * CRT::inv(f3, pk) % pk * quick_pow(p, cnt, pk) % pk;
	}

	ll exlucas(ll n, ll m, ll p) {
		A.clear(), M.clear();
		ll block = sqrt(p);
		for (int i = 2; i <= block && p > 1; ++i) {
			ll u = 1;
			while (p % i == 0) {
				p /= i;
				u *= i;
			}
			if (u > 1) {
				A.push_back(C(n, m, i, u));
				M.push_back(u);
			}
		}
		if (p > 1) {
			A.push_back(C(n, m, p, p));
			M.push_back(p);
		}
		return CRT::solve(A, M);
	}
}