#include<bits/stdc++.h>
#define int long long 
using namespace std;

struct G{
    int x, y;
    G(int x = 0, int y = 0) : x(x), y(y) {}
};

G operator + (const G &a, const G& b) {return G(a.x + b.x, a.y + b.y);}
G operator - (const G &a, const G& b) {return G(a.x - b.x, a.y - b.y);}

int cross(G a, G b) {
    return abs(a.x * b.y - a.y * b.x);
}
struct node {
    int x, y;
};
node a[3];

int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}


int get_node(node a, node b) {
    int x = abs((int)a.x - b.x), y = abs((int)a.y - b.y);
    if(x == 0 && y == 0) return 0;
    return gcd((int)x, (int)y) - 1;
}


void solve(int x) {
  for(int i = 0; i < 3; i++) {
    cin >> a[i].x >> a[i].y;
  }
  G b = G(a[1].x - a[0].x, a[1].y - a[0].y), c = G(a[2].x - a[0].x, a[2].y - a[0].y);
  int s = (cross(b, c) / 2);
  int L = get_node(a[0], a[1]) + get_node(a[0], a[2]) + get_node(a[2], a[1]) + 3;
  if(s == 0) {
    if(x == 0) {
      cout << 0;
    } else {
      cout << 0 << "\n";
    }
    return ;
  }
  if(x == 0) {
    cout << (s + 1 - L / 2);
  } else {
    cout << (s + 1 - L / 2) << "\n";
  }
}

/*
1
1 1
7 2
6 5
*/
signed main() {
  cin.tie(0) -> ios::sync_with_stdio(false);
  cout.tie(0);
  int t;
  cin >> t;
  while(t--) {
    solve(t);
  }
  return 0;
}