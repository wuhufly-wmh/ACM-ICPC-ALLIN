#include<bits/stdc++.h>


#define debug(x) cout << #x << ": " << x << "\n"
using namespace std;

using ll = long long;
constexpr ll inf = 0x3f3f3f3f, P = 1e9 + 7;

struct Z {
  int x;
  int norm(int v) const {
    if (v >= 0 && v < P) {
      return v;
    } else {
      return v < 0 ? v + P : v - P;
    }
  }
  Z qpow(ll n) const {
    Z res = 1;
    for (Z x = *this; n; x *= x, n >>= 1) {
      if (n & 1) {
        res *= x;
      }
    }
    return res;
  }
  Z(int x = 0) : x(norm(x)) {}
  Z(ll x) : x(norm(x % P)) {}
  int val() const {
      return x;
  }
  Z operator - () const {
      return Z(norm(P - x));
  }
  Z inv() const {
      assert(x != 0);
      return qpow(P - 2);
  }
  Z &operator *= (const Z &rhs) {
      x = ll(x) * rhs.x % P;
      return *this;
  }
  Z &operator += (const Z &rhs) {
      x = norm(x + rhs.x);
      return *this;
  }
  Z &operator -= (const Z &rhs) {
      x = norm(x - rhs.x);
      return *this;
  }
  Z &operator /= (const Z &rhs) {
      return *this *= rhs.inv();
  }
  bool operator != (Z rhs) {
    return this -> x != rhs.x;
  }
  bool operator > (Z rhs) {
    return this -> x > rhs.x;
  }
  bool operator >= (Z rhs) {
    return this -> x >= rhs.x;
  }
  bool operator < (Z rhs) {
    return this -> x < rhs.x;
  }
  bool operator <= (Z rhs) {
    return this -> x <= rhs.x;
  }
  bool operator == (Z rhs) {
    return this -> x == rhs.x;
  }
  friend Z operator * (const Z &lhs, const Z &rhs) {
      Z res = lhs;
      res *= rhs;
      return res;
  }
  friend Z operator + (const Z &lhs, const Z &rhs) {
      Z res = lhs;
      res += rhs;
      return res;
  }
  friend Z operator - (const Z &lhs, const Z &rhs) {
      Z res = lhs;
      res -= rhs;
      return res;
  }
  friend Z operator / (const Z &lhs, const Z &rhs) {
      Z res = lhs;
      res /= rhs;
      return res;
  }
  friend std::istream &operator >> (std::istream &is, Z &a) {
      ll v;
      is >> v;
      a = Z(v);
      return is;
  }
  friend ostream &operator << (ostream &out, const Z &val) {
    return out << val.x;
  }
};
template<class T>
T power(T a, int b) {
  T res = 1;
  for (; b; b /= 2, a *= a) {
    if (b & 1) {
      res *= a;
    }
  }
  return res;
}
const int M = 80;
int a[M], tot = 0;
Z dp[M][M][2][2];
int vis[M][M][2][2];
/*
  http://acm.hdu.edu.cn/showproblem.php?pid=7214
*/
void solve() {
  ll k, b, d, l, r;
  cin >> k >> b >> d >> l >> r;
  function<Z(int, int, int, int)> dfs = [&](int dep, int x, int limit, int zero) -> Z {
    if(dep == tot + 1) {
      return x == 0;
    }
    if(x < 0) return 0; 
    if(vis[dep][x][limit][zero]) return dp[dep][x][limit][zero];
    vis[dep][x][limit][zero] = 1;
    int t = limit ? a[dep] : b - 1;
    int cnt = 1;
    if(zero) {
      dp[dep][x][limit][zero] += dfs(dep + 1, x, limit && (a[dep] == 0), zero);
    } else {
      if(d == 0) {
        dp[dep][x][limit][zero] += dfs(dep + 1, x - 1, limit && (a[dep] == 0), 0);
      }
      else {
        dp[dep][x][limit][zero] += dfs(dep + 1, x, limit && (a[dep] == 0), 0);
      }
    }
    int i = 0;
    if(d != 0 && d <= t) {
      dp[dep][x][limit][zero] += dfs(dep + 1, x - 1, limit && (a[dep] == d), 0);
      i = d;
      cnt++;
    }
    if(i != t) {
      dp[dep][x][limit][zero] += dfs(dep + 1, x, limit && (a[dep] == t), zero && (t == 0));
      cnt++;
    }
    dp[dep][x][limit][zero] += dfs(dep + 1, x, 0, 0) * Z(max((t - cnt + 1), 0));
    return dp[dep][x][limit][zero];
  };
/*
  6
  19
  1049
*/
  auto calc = [&](ll x) -> Z {
    tot = 0;
    while(x) {
      a[++tot] = x % b;
      x /= b;
    }
    Z res = 0;
    memset(dp, 0, sizeof(dp));
    memset(vis, 0, sizeof(vis));
    reverse(a + 1, a + 1 + tot);
    for(int i = 1; i <= tot; ++i) {
      res += dfs(1, i, 1, 1) * power(Z(i), k);
    }
    return res;
  };
  Z ans = calc(r) - calc(l - 1);
  cout << ans << "\n";
  return ;
}


signed main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  cout.tie(nullptr);
  int T = 1;
  cin >> T;
  while(T--) {
    solve();
  }
  return 0;
}