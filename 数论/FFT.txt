using ll = long long ;
using db = double;
/*---------------------------------------------------------------------------*/
struct cp {
  db x, y;
  cp(db real = 0, db imag = 0) : x(real), y(imag){};
  cp operator+(cp b) const { return {x + b.x, y + b.y}; }
  cp operator-(cp b) const { return {x - b.x, y - b.y}; }
  cp operator*(cp b) const { return {x * b.x - y * b.y, x * b.y + y * b.x}; }
};
using vcp = vector<cp>;
using Poly = vector<ll>;
namespace FFT {
  const db pi = acos(-1);
  vcp Omega(int L) {
    vcp w(L); w[1] = 1;
    for (int i = 2; i < L; i <<= 1) {
      auto w0 = w.begin() + i / 2, w1 = w.begin() + i;
      cp wn(cos(pi / i), sin(pi / i));
      for (int j = 0; j < i; j += 2)
        w1[j] = w0[j >> 1], w1[j + 1] = w1[j] * wn;
    }
    return w;
  }
  auto W = Omega(1 << 21); // NOLINT
  void DIF(cp *a, int n) {
    cp x, y;
    for (int k = n >> 1; k; k >>= 1)
      for (int i = 0; i < n; i += k << 1)
        for (int j = 0; j < k; ++j)
          x = a[i + j], y = a[i + j + k],
          a[i + j + k] = (a[i + j] - y) *  W[k + j], a[i + j] = x + y;
  }
  void IDIT(cp *a, int n) {
    cp x, y;
    for (int k = 1; k < n; k <<= 1)
      for (int i = 0; i < n; i += k << 1)
        for (int j = 0; j < k; ++j)
          x = a[i + j], y = a[i + j + k] * W[k + j],
          a[i + j + k] = x - y, a[i + j] = x + y;
    const db Inv = 1. / n;
    for(int i = 0; i <= n - 1; ++i) {
      a[i].x *= Inv, a[i].y *= Inv;
    }
    reverse(a + 1, a + n);
  }
}

namespace Polynomial {
  // basic operator
  void DFT(vcp &a) { FFT::DIF(a.data(), a.size()); }
  void IDFT(vcp &a) { FFT::IDIT(a.data(), a.size()); }
  int norm(int n) { return 1 << ((int)(log(n) / log(2))+ 1); }
  
  // Poly mul
  vcp &dot(vcp &a, vcp &b) {
    for(int i = 0; i < a.size(); ++i) {
      a[i] = a[i] * b[i]; 
    }
    return a;
  }
  Poly operator+(Poly a, Poly b) {
    int maxlen = max(a.size(), b.size());
    Poly ans(maxlen + 1);
    a.resize(maxlen + 1), b.resize(maxlen + 1);
    for (int i = 0; i < maxlen;i++)
      ans[i] = a[i] + b[i];
    return ans;
  }
  Poly operator*(ll k, Poly a) {
    Poly ans;
    for(auto i:a)
      ans.push_back(k * i);
    return ans;
  }
  Poly operator*(Poly a, Poly b) {
    int n = a.size() + b.size() - 1;
    vcp c(norm(n));
    int sz = a.size();
    for(int i = 0; i <= sz - 1; ++i) {
      c[i].x = a[i];
    }
    sz = b.size();
    for(int i = 0; i <= sz - 1; ++i) {
      c[i].y = b[i];
    }
    DFT(c), dot(c, c), IDFT(c), a.resize(n);
    for(int i = 0; i <= n - 1; ++i) {
      a[i] = int(c[i].y * .5 + .5);
    }
    return a;
  }
}
/*---------------------------------------------------------------------------*/
using namespace Polynomial;