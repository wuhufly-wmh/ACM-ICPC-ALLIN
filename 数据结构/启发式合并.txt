#include<bits/stdc++.h>

    
using namespace std;
#define int long long 
#define debug(x) cout << #x << ": " << x << endl;
const int N = 4e5 + 5, mod = 1e9 + 7, inf = 0x3f3f3f3f, eps = 1e-7;

vector<map<int, int> >vec(N + 5);
int head[N] = {0};
int cnt = 0;
int col[N] = {0};
int ans[N] = {0};
int MAX[N] = {0};
struct edge{
	int to, next;
}G[N << 2];
void solve() {
	auto add = [&](int u, int v){
		G[++cnt] = {v, head[u]};
		head[u] = cnt;
		return ;
	};
	int n, u, v;
	cin >> n;
	for(int i = 1; i <= n; ++i) {
		cin >> col[i];
		head[i] = -1;
	}
	for(int i = 1; i <= n - 1; ++i) {
		cin >> u >> v;
		add(u, v);
		add(v, u);
	}
	function<void(int, int)> dfs = [&](int u, int fa) {
		vec[u][col[u]]++;
		ans[u] = col[u];
		MAX[u] = 1;
		for(int i = head[u]; ~i; i = G[i].next){
			int v = G[i].to;
			if(v == fa) continue;
			dfs(v, u);
			if(vec[u].size() < vec[v].size()){
				swap(vec[u], vec[v]);
				ans[u] = ans[v];
				MAX[u] = MAX[v];
			}
			for(auto run : vec[v]){
				vec[u][run.first] += run.second;
				if(MAX[u] < vec[u][run.first]){
					MAX[u] = vec[u][run.first];
					ans[u] = run.first;
				}else if(MAX[u] == vec[u][run.first]){
					ans[u] += run.first;
				}
			}
		}
	};
	dfs(1, 0);
	for(int i = 1; i <= n; ++i) {
		cout << ans[i] << " \n"[i == n];
	}
	return ;

}
/*
*/


signed main(){
	cin.tie(0) -> sync_with_stdio(false);
	cout.tie(0);
	int _;
	_ = 1;
	while(_--){
		solve();
	}
	return 0;
}